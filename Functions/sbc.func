% Master-Script See the "?" for info on commands.
def sbc():
  rsg: (6.83103 + uw_cooling_mod_khz/1000000) 5
  off: probeRf
  off: repumpRf
  daclinspace: motFreq defaultMotFreq -0.5 1 10  
  dac: probePower 0
  dac: repumpfreq -1.5
  dac: sigmaoppower sbc_sigma_op__servo_value
  dac: sigmarepumpPower sigma_repump__servo_value
  %dac: sigmarepumpPower sbc_sigma_repump
  dac: topPulseLev top_raman_sideband_spec__servo_value
  dac: axPulseLev ax_raman_spec__servo_value
  dac: eoPulseLev eo_raman__servo_value
  dac: axPulseLev 0
  t += 1
  off: uw_mod_switch 
  var sbcOpCoolingPulseTime 0.012
  var sbctoppulsetime 0.044
  repeat: 40
    call axialRamanPulse(0.05) 
    call opPulse(sbcOpCoolingPulseTime)
    call topRamanPulse(sbctoppulsetime)
    %on: sigmaRepumpRf
    %t += sbcOpCoolingPulseTime
    %off: sigmaRepumpRf  
    call opPulse(sbcOpCoolingPulseTime) 
  end
  % its important that you wait long enough after the rstrig for the rsg
  % to actually change its output, which I find takes about 0.15 s 
  % MOB Sep 11th 2019 
  pulseon: rsTrig 0.1
  t += 0.16
