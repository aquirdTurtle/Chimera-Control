// created by Mark O. Brown

===================
CODE PLANNING
===================
FEATURES:
- Full experiments following each other, alternative use of sequences.
- Consider ways to make navigating many functions more sensible.
- finish implementing randomizing repetitions.
	- Create per-repetitiong list of variation values to use
	- Be able to randomize
	- handle random case in plotting.
	- be able to add more repetitions on the fly if randomizing reps. Requires some camera magic probably.
	- mix sequences in as well?
		- also gets tricky if diff sequences use instruments differently.
- restore the Niawg functionality where it calculates next varying waveform during the run of the previous waveform.
- support functions for niawg and agilent scripts
- support variables for agilent scripts
- proper syntax coloring for local variables
- implement real-time sanity check that the picture rate is matching the rep rate
- agilent script programNow with variables, should be able to set constants with program now.
- agilent should be able to go smoothly from one waveform to another.
- get running average working again
- add all agilents / tek to color boxes?
- restore ability to look multi-pixel conditions / events in plots
- improve experiment status; include which config was run, variable options
- report oscilloscope data to datalogger
- report initial values of dacs and ttls to datalogger
- report andor background data to datalogger if calibrating background out
- improve delete file after abort functionality
	- decorate name, delete after a while, or something similar.
- Integrate the Andor and Basler cameras into the experimentThreadProcedure to enable calibrations, etc. between 
	variations.
- add reporting on how many atoms loaded via atomcruncher thread.
	- accessible from main window, perhaps
	- report to h5 file as well
- prompt for load after saving config as
- improve delete file after abort functionality
	- decorate name and (maybe) delete after a while, or just decorate...
- Improve auto-optimization
	- Implement different algorithms...
		- basin-hopping
 		- Randomized Search
 		- Neural Network
		- Genetic / evolutionary
	- End when converged
	- make finishing of optimization smoother
	- option to text when optimization finished. 
- Implement smarter thresholding?
	- Have code run python script which makes use of my auto-finding of the gaussian thresholds at the end of a run.
	  Especially useful for auto-optimization to keep this good over time.
- Make (option for) hist plots for single pic mode andor images
- include calibration data in dac and servos
- be able to query current connection status like what shows up in the beginning
- some way of making niawg scripts with many tones more compact. something with arrays.
- make plot update rate be changeable in real-time to help deal with slowness in long runs.
- check number of basler triggers against basler total picture number
- can't do non-square multi-dim scans
- make data analysis plotting listview smart about # of pictures
- some sort of more real-time adjustment of parameters, need some sort of looping around starting configs... or some other solution
Refactoring / Other:
- change threads waiting on bools to waiting on signalers
- refactor groups in plotinfo in real time plotting
- change pointers to smart-ptrs where possible
- more tooltips
- better documentation in general
- Andor system should use Matrix class for pictures, like basler.
- all mutexes should use lock_guard or similar for consistency
- refactor main experiment thread / master procedure handling to make more use of DioRows. Right now I believe there's 
	a lot of conversion back and forth between DioRows and ints. maybe not worthwhile though considering the impending
	ftdi change?
- reduce size of niawgcontroller file somehow, it's ungainly huge.
- refactor commonfunctions, it's a bit of a mess. 
- Make config parameter system aware of whether it is giving a constant or variable run so that the range stuff can be 
	accurate.
- refactor rerngmove complexmove and simplemove names which are confusing... 
- refactor master configuration to be more similar to normal configuration reading
- Label all values in config file, making it very human-readable.
- reorganize .h and .cpp files in visual studio
- remove the complicated rearrangement that happens on the camera window, all functions available at all times.
- reconsider how to handle initial dac and ttl values
Checks and Tests
- add check for flash that sum of indv move times is the total move time.
- check niawg script for multiple repeat forevers or commands outside a repeat forever.
- test niawg script reading for different inputs that should be identical, related to ramps with nr for example.
- change agilent mode option to enum class
BUGS:
- scripts becoming unsaved after move, should preserve saved status
- global variable colors don't appear to always be correct; agilent variable issue probably?
- seems like master configuration file can get corrupted if saving fails - should do something to safeguard this...
- going from config with video to kinetic mode on andor fails because internal reps per var is too high
- if taking pictures too fast code can freeze while pics getting handled.
- err boxes don't grab focus of entire program
- should be able to change basler image dimensions edits while running
- basler fails silently sometimes if issues with binning or dims // haven't seen in a while...
- constant beeping if no mot and continuous freezes things basler
- can't do non-square multi-dim scans
- figure out why figure update seems to cause main thread window thread to freak out
- reported # ttl events in experiment looks wrong
- new function then save doesn't save as function
- ttl display not accurate at end of exp

- image grid popping errors issue, seems related to different binning between f1 and config setting
	- picture data didn't match grid size!
- figure out why plot figure update seems to cause main thread window thread to freak out
- empty script not causing error???
- deal with zero crossing in quick change dacs
- plot dialog x axis incorrect when a grid line is created for each data point (i.e. few variations)
